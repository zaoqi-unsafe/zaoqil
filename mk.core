;;  A minimal microKanren implementation
;;  Copyright (C) 2017  Zaoqi

;;  This program is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU Affero General Public License as published
;;  by the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.

;;  This program is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU Affero General Public License for more details.

;;  You should have received a copy of the GNU Affero General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
(open listmonad
      (module
          call/fresh (λ f
                       (gensym
                        (λ s
                          (f (struct var id x)))))
        disj (λ2 g1 g2 (λ s (mplus (g1 s) (g2 s))))
        conj (λ2 g1 g2 (λ s (bind (g1 s) g2)))
        get (λ s (λ xs (λ d (λ t
                              (if (null? xs)
                                  d
                                  (if (= (car (car xs)) s)
                                      (t (cdr (car xs)))
                                      (get s (cdr xs) d)))))))
        walk (λ s (λ x (get x s s (walk s))))
        ext-s (λ s (λ x (λ v (cons (cons x v) s))))
        unify (λ s (λ2 x y
                       (if (= x y)
                           s
                           (if (and (struct? var x) (struct? var y))
                               false
                               (if (struct? var x)
                                   (ext-s s x y)
                                   (if (struct? var y)
                                       (ext-s s y x)
                                       (if (pair? x)
                                           (if (pair? y)
                                               (let (ns (unify s (car x) (car y)))
                                                 (if ns
                                                     (unify ns (cdr x) (cdr y))
                                                     false))
                                               false)
                                           (if (record? x)
                                               (if (record? y)
                                                   (unify s (record->list x) (record->list y))
                                                   false)
                                               false))))))))
        == (λ2 x y (λ s (let (ns (unify s x y))
                          (if ns
                              (list ns)
                              '()))))
        ))
