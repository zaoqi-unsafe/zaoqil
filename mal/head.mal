;;  Copyright (C) 2017  Zaoqi

;;  This program is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU Affero General Public License as published
;;  by the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.

;;  This program is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU Affero General Public License for more details.

;;  You should have received a copy of the GNU Affero General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define-syntax unlazy*
  (syntax-rules ()
    [(_ () e) e]
    [(_ ([x v] y ...) e) (unlazy v (λ (x) (unlazy* (y ...) e)))]))

(defmacro! λprimitive
  (fn* (env args body)
       `(eprimitive
         (λ (~env args0)
           (unlazy-list
            args0
            (λ (~args)
              ~body))))))

(defmacro! define-primitive
  (fn* (fs body)
       `(global-env-define
         (quote ~(car fs))
         (λprimitive ~(car (cdr fs)) ~(car (cdr (cdr fs))) ~body))))

(defmacro! define-primitive-f
  (fn* (fs e)
       `(global-env-define
         (quote ~(car fs))
         (eeval
          global-env
          ~(%define-primitive-f (cdr fs) (cdr fs) e)))))

(define (%define-primitive-f sx xs e)
  (if (null? sx)
      `(list (λprimitive
              env
              args
              (unify xs args
                     (let ~(map (λ (x) [x `(eeval env ~x)]) xs)
                       ~e))) ~@xs)
      `(list 'λ (quote ~(car sx)) ~(%define-primitive-f (cdr sx) xs e))))

(defmacro! unify
  (fn* (vs xs e)
       (if (null? vs)
           e
           `(let ([~(car vs) (car ~xs)])
              (unify ~(cdr vs) (cdr ~xs) ~e)))))

(defmacro! define-primitive-f-unlazy
  (fn* (fxs e)
       `(define-primitive-f ~fxs
          (unlazy* ~(map (λ (x) (list x x)) (rest fxs)) ~e))))

(defmacro! prim
  (fn* (l)
       `(define-primitive-f-unlazy ~l ~l)))

(define (readfile f) (read-string (slurp f)))

(scheme

 