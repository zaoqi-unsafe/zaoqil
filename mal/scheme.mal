;;  Copyright (C) 2017  Zaoqi

;;  This program is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU Affero General Public License as published
;;  by the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.

;;  This program is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU Affero General Public License for more details.

;;  You should have received a copy of the GNU Affero General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.

(defmacro! and
  (fn* (& xs)
       (if (empty? xs)
           true
           (if (= 1 (count xs))
               (first xs)
               (let* (condvar (gensym))
                 `(let* (~condvar ~(first xs))
                    (if ~condvar (and ~@(rest xs)) ~condvar)))))))

(defmacro! or
  (fn* (& xs)
       (if (empty? xs)
           nil
           (if (= 1 (count xs))
               (first xs)
               (let* (condvar (gensym))
                 `(let* (~condvar ~(first xs))
                    (if ~condvar ~condvar (or ~@(rest xs)))))))))

(def! displayln println)
(def! append concat)
(def! hash hash-map)
(def! hasheq hash-map)
(def! hasheqv hash-map)
(def! hash-set assoc)
(def! set list)
(def! seteq list)
(def! seteqv list)
(def! eq? =)
(def! eqv? =)
(def! equal? =)
(def! load load-file)

(defmacro! set!
  (fn* (& xs)
       (cons 'def! xs)))
(defmacro! λ
  (fn* (args & body)
       `(fn* ~args (do ~@body))))
(defmacro! begin
  (fn* (& xs)
       (cons 'do xs)))

(defmacro! define
  (fn* (& xs)
       (let* (s (first xs))
         (if (symbol? s)
             (list 'def! s (first (rest xs)))
             `(def! ~(first s) (fn* ~(rest s) ~(first (rest xs))))))))

(define (cm s xs c)
  (if (empty? xs)
      ()
      (let* (x (first xs))
        (cons
         (list c (symbol (str s '- (if (vector? x) (nth x 0) x))))
         (cm s (rest xs) (+ c 1))))))

(defmacro! provide
  (fn* (& xs) nil))

(defmacro! struct
  (fn* (id rfs)
       (let* (fs (cm id rfs 1) isit (symbol (str id "?")) ss (map (fn* (x) (nth x 1)) fs))
         (concat
          `(do
               (def! ~id
                 (fn* ~ss
                      (vector (quote ~id) ~@(map (λ (x) (list 'atom x)) ss))))
             (def! ~isit
               (fn* (s)
                    (and (vector? s) (= (count s) ~(+ (count fs) 1)) (= (nth s 0) (quote ~id))))))
          (map (fn* (x)
                    `(def! ~(symbol (str "set-" (nth x 1) "!"))
                       (fn* (s v)
                            (if (~isit s)
                                (reset! (nth s ~(nth x 0)) v)
                                (throw "type error")))))
               fs)
          (map (fn* (x)
                    `(def! ~(nth x 1)
                       (fn* (s)
                            (if (~isit s)
                                (deref (nth s ~(nth x 0)))
                                (throw "type error")))))
               fs)))))

(define clist? list?)
(struct pair (a d))
(define scons pair)
(define (car x)
  (if (pair? x)
      (pair-a x)
      (first x)))
(define (cdr x)
  (if (pair? x)
      (pair-d x)
      (rest x)))
(define null? empty?)
(define (list? xs)
  (or (clist? xs) (null? xs)
      (and (pair? xs) (list? (cdr xs)))))

(defmacro! scheme
  (fn* (& xs)
       `(let* (cons scons)
          ~(cons 'do xs))))

(define (set-member? xs x)
  (if (null? xs)
      false
      (or (= (car xs) x) (set-member? (cdr xs) x))))

(define (hash-has-key? h k)
  (set-member? (keys h) k))

(def! hash-ref
  (fn* (h k & xs)
       (if (hash-has-key? h k)
           (get h k)
           (if (clist? xs)
               (first xs)
               (throw "hash-ref: no value found for key")))))

(defmacro! let
  (fn* (ps & cs)
       `((fn* ~(map first ps)
              (do ~@cs))
         ~@(map (fn* (x) (first (rest x))) ps))))

(struct deljustv (v))
(struct del/namev (v))
(struct delv ([v #:mutable]))
(struct del+v ([v #:mutable]))
(defmacro! delay/name (fn* (x) `(del/namev (fn* () ~x))))
(define (force/name x) ((del/namev-v x)))
(defmacro! delay (fn* (x) `(delv (delay/name ~x))))
(define (force/ x)
  (let ([v (delv-v x)])
    (if (deljustv? v)
        (deljustv-v v)
        (let ([v1 (force/name v)])
          (set-delv-v! x (deljustv v1))
          v1))))
(define (%2delay+ x)
  (if (delv? x)
      (delay/name (%2delay+ (force/ x)))
      x))
(define (2delay+ x)
  (del+v (%2delay+ x)))
(define (force+ x)
  (let ([v (del+v-v x)])
    (if (del/namev? v)
        (let ([v1 (force/name v)])
          (set-del+v-v! x v1)
          x)
        v)))
(define (force x)
  (if (del/namev? x) (force/name x)
      (if (delv? x) (force/ x)
          (if (del+v? x) (force+ x)
              x))))

nil
